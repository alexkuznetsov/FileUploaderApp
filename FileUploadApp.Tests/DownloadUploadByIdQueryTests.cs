using FileUploadApp.Domain;
using FileUploadApp.Requests;
using FileUploadApp.Storage;
using FileUploadApp.StreamAdapters;
using MediatR;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.DependencyInjection.Extensions;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using System;
using System.Threading;
using System.Threading.Tasks;

namespace FileUploadApp.Tests
{
    [TestClass]
    public class DownloadUploadByIdQueryTests
    {
        public TestContext TestContext { get; set; }

        private IServiceProvider serviceProvider;
        private Metadata _dm;
        private Upload _du;

        [TestInitialize]
        public void Initialize()
        {
            var builder = new ContainerBuilder();

            serviceProvider = builder.Create((s) =>
            {
                #region Replace by mocked

                var fakeMetaStore = CreateFakeMetadataStore();
                var sd = new ServiceDescriptor(
                      typeof(IStoreBackend<Guid, Metadata>)
                    , (_) => fakeMetaStore
                    , ServiceLifetime.Scoped);

                s.Replace(sd);

                var fakeUploadsStore = CreateFakeUploadStore();

                sd = new ServiceDescriptor(
                      typeof(IStoreBackend<Guid, Upload>)
                    , (_) => fakeUploadsStore
                    , ServiceLifetime.Scoped);

                s.Replace(sd);

                var fakeFileStmAdapter = CreateFakeStreamAdapter();

                sd = new ServiceDescriptor(
                     typeof(IFileStreamProvider<Guid, StreamAdapter>)
                   , (_) => fakeFileStmAdapter
                   , ServiceLifetime.Scoped);

                s.Replace(sd);

                #endregion
            });
        }

        [TestCleanup]
        public void Cleanup()
        {
            if (serviceProvider is IDisposable d)
            {
                d.Dispose();
            }
        }

        [TestMethod]
        public async Task Test_QueryShouldReturnValidEntity()
        {
            var req = new DownloadUploadByIdQuery(RequestId);

            using (var scope = serviceProvider.CreateScope())
            {
                var mediator = serviceProvider.GetRequiredService<IMediator>();
                var response = await mediator.Send(req);

                Assert.IsNotNull(response);
                Assert.AreEqual(response.Id, RequestId);
                Assert.AreEqual(response.Name, DefaultUpload.Name);
                Assert.AreEqual(response.Stream.Stream.Length, DefaultStreamAdapter.Stream.Length);
                Assert.AreEqual(response.ContentType, DefaultUpload.ContentType);
            }
        }


        #region Mock 

        private Guid RequestId { get; } = Guid.NewGuid();

        private Metadata DefaultMetadata
        {
            get
            {
                if (_dm == null)
                {
                    _dm = new Metadata(RequestId, "name", Services.MimeConstants.BitmapMime, DateTime.Parse("2018-05-31 10:00"));
                }

                return _dm;
            }
        }

        private StreamAdapter DefaultStreamAdapter =>
            new ByteaStreamAdapter(
                Convert.FromBase64String(
                       "Qk2mFQAAAAAAADYAAAAoAAAAJQAAADEAAAABABgAAAAAAHAVAAAAAAAAAAAAAAAAAAAAAAAA////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////AP///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wD///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////8A////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////AP///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wD///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////8A////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////AP///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wD///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////8A////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////AP///////////////////////wAAAP///////////////////////////////////////////////////////////////////wAAAAAAAP///////////////////////////////////////////wD///////////////////////8AAAD///////////////////////////////////////////////////////////////8AAAD///////////////////////////////////////////////////8A////////////////////////AAAA////////////////////////////////////////////////////////////AAAAAAAA////////////////////////////////////////////////////AP///////////////////////wAAAP///////////////////////////////////////////////////////////wAAAP///////////////////////////////////////////////////////wD///////////////////////////8AAAD///////////////////////////////////////////////////////8AAAD///////////////////////////////////////////////////////8A////////////////////////////AAAA////////////////////////////////////////////////AAAAAAAA////////////////////////////////////////////////////////////AP///////////////////////////////wAAAP///////////////////////////////////////////wAAAP///////////////////////////////////////////////////////////////wD///////////////////////////////////8AAAD///////////////////////////////////////8AAAD///////////////////////////////////////////////////////////////8A////////////////////////////////////////AAAA////////////////////////////////AAAAAAAA////////////////////////////////////////////////////////////////AP///////////////////////////////////////////wAAAP///////////////////////////wAAAP///////////////////////////////////////////////////////////////////wD///////////////////////////////////////////8AAAD///////////////////////8AAAD///////////////////////////////////////////////////////////////////////8A////////////////////////////////////////////////AAAA////////////////AAAA////////////////////////////////////////////////////////////////////////////AP///////////////////////////////////////////////wAAAP///////////wAAAP///////////////////////////////////////////////////////////////////////////////wD///////////////////////////////////////////////////8AAAD///////8AAAD///////////////////////////////////////////////////////////////////////////////8A////////////////////////////////////////////////////AAAAAAAAAAAA////////////////////////////////////////////////////////////////////////////////////AP///////////////////////////////////////////////////wAAAP///////////////////////////////////////////////////////////////////////////////////////////wD///////////////////////////////////////////////////8AAAAAAAAAAAAAAAD///////////////////////////////////////////////////////////////////////////////8A////////////////////////////////////////////////////AAAA////////////AAAA////////////////////////////////////////////////////////////////////////////AP///////////////////////////////////////////////wAAAP///////////////wAAAP///////////////////////////////////////////////////////////////////////////wD///////////////////////////////////////////8AAAD///////////////////8AAAD///////////////////////////////////////////////////////////////////////////8A////////////////////////////////////////////AAAA////////////////////////AAAAAAAA////////////////////////////////////////////////////////////////////AP///////////////////////////////////////////wAAAP///////////////////////////////wAAAP///////////////////////////////////////////////////////////////wD///////////////////////////////////////8AAAD///////////////////////////////////8AAAD///////////////////////////////////////////////////////////////8A////////////////////////////////////////AAAA////////////////////////////////////////AAAA////////////////////////////////////////////////////////////AP///////////////////////////////////wAAAP///////////////////////////////////////////wAAAAAAAP///////////////////////////////////////////////////////wD///////////////////////////////8AAAAAAAD///////////////////////////////////////////////8AAAD///////////////////////////////////////////////////////8A////////////////////////////AAAA////////////////////////////////////////////////////////AAAAAAAA////////////////////////////////////////////////////AP///////////////////////////wAAAP///////////////////////////////////////////////////////////wAAAP///////////////////////////////////////////////////wD///////////////////////////8AAAD///////////////////////////////////////////////////////////////////////////////////////////////////////////////////8A////////////////////////AAAA////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////AP///////////////////////wAAAP///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wD///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////8A////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////AP///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wD///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////8A////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////AP///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wD///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////8A////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////AA=="));

        private Upload DefaultUpload
        {
            get
            {
                if (_du == null)
                {
                    _du = new Upload(RequestId, Guid.Empty, 0U, DefaultMetadata.Name, DefaultMetadata.ContentType
                        , DefaultStreamAdapter);
                }

                return _du;
            }
        }

        private IFileStreamProvider<Guid, StreamAdapter> CreateFakeStreamAdapter()
        {
            var mock = new Mock<IFileStreamProvider<Guid, StreamAdapter>>();
            mock.Setup(x => x.GetStreamAdapter(It.Is<Guid>(g => g.Equals(RequestId))))
                .Returns(DefaultStreamAdapter);

            return mock.Object;
        }

        private IStoreBackend<Guid, Upload> CreateFakeUploadStore()
        {
            var mock = new Mock<IStoreBackend<Guid, Upload>>();
            mock.Setup(x => x.FindAsync(It.Is<Guid>(y => y == RequestId), It.IsAny<CancellationToken>()))
                .Returns(Task.FromResult(DefaultUpload));

            return mock.Object;
        }

        private IStoreBackend<Guid, Metadata> CreateFakeMetadataStore()
        {
            var mock = new Mock<IStoreBackend<Guid, Metadata>>();

            mock.Setup(x => x.FindAsync(It.IsAny<Guid>(), It.IsAny<CancellationToken>()))
                .Returns(Task.FromResult(DefaultMetadata));

            return mock.Object;
        }

        #endregion
    }
}
